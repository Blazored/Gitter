@typeparam T
<JSRunner ref="jsRunner" ValueReturned="@OnValueReturned"/>
@functions
{
		JSRunner jsRunner;
		[Parameter] protected string Key { get; set; }
		[Parameter] protected T Item { get; set; }
		[Parameter] protected string Mode { get; set; }
		[Parameter] protected Action<T> ItemRead { get; set; }

		protected override void OnInit()
		{
			base.OnInit();
			Mode = Mode ?? "Write";
		}
		protected override void OnParametersSet()
		{
			base.OnParametersSet();
			switch (Mode)
			{
				case "Write":
					if (!string.IsNullOrWhiteSpace(Key) && Item is object && jsRunner is object)
					{
						jsRunner.RunJS($"localStorage.setItem('{Key}','{Json.Serialize(Item)}')");
					}
					break;
				case "Read":
					if (!string.IsNullOrWhiteSpace(Key) && jsRunner is object)
					{
						jsRunner.GetValueJS($"localStorage.getItem('{Key}')");
					}
					break;
			}
		}
		void OnValueReturned(string value)
		{
			try
			{
				ItemRead?.Invoke(Json.Deserialize<T>(value));
			} catch
			{
				try
				{
					ItemRead?.Invoke((T)Convert.ChangeType(value, typeof(T)));
				}
				catch { }
			}
		}

}